datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Neon connection string
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile?
}

model Profile {
  userId      String   @id
  displayName String?
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Save        Save?
  Workouts    Workout[]
}

model Save {
  userId               String  @id
  level                Int     @default(1)
  xp                   Int     @default(0)
  energy               Int     @default(100)
  lastEnergyResetDate  DateTime?
  strength             Int     @default(1)
  stamina              Int     @default(1)
  agility              Int     @default(1)
  injury               Int     @default(0)
  spriteStage          Int     @default(0)
  proficiencyPoints    Int     @default(0)
  updatedAt            DateTime @updatedAt
  Profile              Profile  @relation(fields: [userId], references: [userId])
  ExerciseProficiencies ExerciseProficiency[]
  ResearchUpgrades     ResearchUpgrade[]
  CategoryMasteries    CategoryMastery[]
}

model Workout {
  id           BigInt   @id @default(autoincrement())
  userId       String
  exerciseId   String
  type         String
  reps         Int
  difficulty   Int      @default(1)
  energySpent  Int
  xpGained     Int
  statGains    Json
  performedAt  DateTime @default(now())
  Profile      Profile  @relation(fields: [userId], references: [userId])

  @@index([userId, performedAt])
}

model Exercise {
  id              String   @id @default(cuid())
  name            String
  category        String   // 'strength', 'endurance', 'mobility'
  baseReps        Int
  baseEnergy      Int
  baseXp          Int
  statType        String   // 'strength', 'stamina', 'agility'
  imagePath       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ExerciseProficiencies ExerciseProficiency[]
  ResearchUpgrades       ResearchUpgrade[]
}

model ExerciseProficiency {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  proficiency Int      @default(0) // 0-1000 (new system)
  dailyEnergy Int      @default(0) // energy spent today on this exercise
  lastDailyReset DateTime @default(now()) // when daily energy was last reset
  totalReps   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
}

model ResearchUpgrade {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  tier        Int      @default(0) // 0-4 (0 = no upgrades, 1-4 = tier levels)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
}

model CategoryMastery {
  id          String   @id @default(cuid())
  userId      String
  category    String   // 'strength', 'endurance', 'mobility'
  level       Int      @default(0) // 0-3 (0 = no mastery, 1-3 = mastery levels)
  totalProficiency Int @default(0) // sum of all proficiencies in this category
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  @@unique([userId, category])
  @@index([userId])
}
