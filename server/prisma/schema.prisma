datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Neon connection string
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  DailyPurchases DailyPurchase[]
  
  @@index([email])
  @@index([username])
}

model Save {
  userId               String  @id
  level                Int     @default(1)
  xp                   Int     @default(0)
  energy               Float   @default(100.0)
  lastEnergyUpdate     DateTime @default(now())
  lastDailyReset       DateTime?
  strength             Int     @default(1)
  stamina              Int     @default(1)
  mobility             Int     @default(1)
  proficiencyPoints    Int     @default(0)
  cash                 Int     @default(0)
  maxEnergy            Float   @default(150.0)
  permanentEnergy      Int     @default(0) // permanent energy stat that increases max energy
  shopRotationSeed     Int?
  lastShopRotation     DateTime?
  adventureRotationSeed Int?
  lastAdventureRotation DateTime?
  dailyAdventureAttempts Int   @default(0) // how many adventures attempted today
  lastAdventureReset   DateTime? // when daily adventure count was last reset
  dailyResetCount      Int     @default(0) // counter for daily resets
  xpBoostRemaining    Int     @default(0) // remaining XP boost workouts
  proficiencyBoostRemaining Int @default(0) // remaining proficiency boost workouts
  luckBoostPercent    Int     @default(0) // luck boost percentage
  permanentXpGain     Int     @default(0) // permanent XP gain percentage from research
  updatedAt            DateTime @updatedAt
  ExerciseProficiencies ExerciseProficiency[]
  ResearchUpgrades     ResearchUpgrade[]
  AdventureAttempts    AdventureAttempt[]
  
  @@index([lastDailyReset])
  @@index([lastEnergyUpdate])
}

// Workout model removed for performance optimization
// All necessary data is tracked in Save and ExerciseProficiency tables

model Exercise {
  id              String   @id @default(cuid())
  name            String
  category        String   // 'strength', 'endurance', 'mobility'
  baseReps        Int
  baseEnergy      Int
  baseXp          Int
  statType        String   // 'strength', 'stamina', 'mobility'
  statGainAmount  Int      @default(1) // how many stat points this exercise gives
  imagePath       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ExerciseProficiencies ExerciseProficiency[]
  ResearchUpgrades       ResearchUpgrade[]
  
  @@index([category, isActive])
  @@index([statType])
}

model ExerciseProficiency {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  proficiency Int      @default(0) // 0-1000 (new system)
  dailyEnergy Int      @default(0) // energy spent today on this exercise
  dailyStatGains Int   @default(0) // number of stat gains today (max 5)
  lastDailyReset DateTime @default(now()) // when daily energy was last reset
  dailyResetCount Int  @default(0) // the daily reset count when this exercise was last reset
  totalReps   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([exerciseId])
  @@index([proficiency])
  @@index([lastDailyReset])
}

model ResearchUpgrade {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  tier        Int      @default(0) // 0-4 (0 = no upgrades, 1-4 = tier levels)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([exerciseId])
  @@index([tier])
}


model Adventure {
  id          String   @id @default(cuid())
  name        String
  description String
  difficulty  String   // 'easy', 'medium', 'hard', 'legendary'
  energyCost  Int
  xpReward    Int
  statReward  Json     // { strength: 0, stamina: 0, mobility: 0 }
  cashReward  Int      @default(0) // cash reward for completing adventure
  strengthReq Int      @default(0) // minimum strength required
  staminaReq  Int      @default(0) // minimum stamina required
  durationMinutes Int  @default(120) // how long the adventure takes in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  AdventureAttempts AdventureAttempt[]

  @@unique([name, difficulty])
  @@index([difficulty, isActive])
  @@index([energyCost])
}

model AdventureAttempt {
  id          String   @id @default(cuid())
  userId      String
  adventureId String
  success     Boolean
  energySpent Int
  xpGained    Int
  statGains   Json
  cashGained  Int      @default(0)
  attemptedAt DateTime @default(now())
  completedAt DateTime? // when the adventure was completed (null if still in progress)
  completedResetCount Int? // the daily reset count when this adventure was completed
  status      String   @default("in_progress") // "in_progress", "ready_to_claim", "completed", "failed"
  
  Save        Save     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Adventure   Adventure @relation(fields: [adventureId], references: [id], onDelete: Cascade)
  
  @@index([userId, attemptedAt])
  @@index([userId, status])
  @@index([adventureId])
  @@index([status])
  @@index([completedAt])
}

model ShopItem {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String   // 'energy_boosters', 'supplements', 'special_items'
  cost        Int
  icon        String
  type        String   // 'energy_restore', 'stat_boost', 'max_energy', 'xp_boost', 'full_restore', 'proficiency_boost'
  effectValue Int      // How much energy/stats/etc it provides
  statType    String?  // For stat boosts: 'strength', 'stamina', 'mobility'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  DailyPurchases DailyPurchase[]
  
  @@index([category, isActive])
  @@index([type])
  @@index([cost])
}

model DailyPurchase {
  id          String   @id @default(cuid())
  userId      String
  shopItemId  String
  purchasedAt DateTime @default(now())
  purchaseResetCount Int // the daily reset count when this item was purchased
  
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ShopItem    ShopItem @relation(fields: [shopItemId], references: [id], onDelete: Cascade)
  
  @@index([userId, purchaseResetCount])
  @@index([userId, shopItemId, purchaseResetCount])
}
